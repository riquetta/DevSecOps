name: Infra Deploy (Terraform + AKS)

on:
  workflow_dispatch:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init -backend-config="resource_group_name=${{ secrets.TF_RG }}" \
                            -backend-config="storage_account_name=${{ secrets.TF_STORAGE }}" \
                            -backend-config="container_name=tfstate" \
                            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RG }} \
                                 --name ${{ secrets.AKS_CLUSTER_NAME }} \
                                 --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
