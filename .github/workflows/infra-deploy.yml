name: Infra Deploy (Terraform + AKS)

on:
  workflow_dispatch:
  workflow_call:
  repository_dispatch:
    types: [deploy-infrastructure]

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  deployments: write

env:
  ARM_USE_OIDC: true
  KUBE_CONFIG_PATH: ~/.kube/config
  GITHUB_TOKEN: ${{ secrets.GH_PAT }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infra/
          framework: terraform
          quiet: true
          soft_fail: false

  terraform:
    needs: security-scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      resource_group: ${{ steps.terraform_output.outputs.resource_group }}
      cluster_name: ${{ steps.terraform_output.outputs.cluster_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure CLI Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        id: init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STORAGE }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Format Check
        working-directory: ./infra
        run: terraform fmt -check

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        continue-on-error: true
        run: |
          terraform plan -detailed-exitcode -out=tfplan 2>&1 | tee plan.txt

      - name: Terraform Show
        if: steps.plan.outcome == 'success'
        working-directory: ./infra
        run: |
          terraform show -no-color tfplan > plan.txt

      - name: Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        working-directory: ./infra
        run: |
          terraform apply -auto-approve tfplan

      - name: Capture Terraform Outputs
        id: terraform_output
        if: success()
        working-directory: ./infra
        run: |
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

  deploy-to-aks:
    needs: terraform
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure CLI Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.terraform.outputs.resource_group }} \
            --name ${{ needs.terraform.outputs.cluster_name }} \
            --overwrite-existing

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBE_CONFIG_PATH }}

      - name: Deploy to AKS
        working-directory: ./infra/k8s
        run: |
          # Apply manifests with retries
          for manifest in deployment.yaml service.yaml; do
            retries=3
            until kubectl apply -f $manifest || [ $retries -eq 0 ]; do
              retries=$((retries-1))
              echo "Retrying manifest application in 10s..."
              sleep 10
            done
          done
          
      - name: Verify Deployment
        working-directory: ./infra/k8s
        run: |
          # Get deployment name dynamically
          DEPLOY_NAME=$(kubectl get deploy -o name | head -n 1)
          if [ -z "$DEPLOY_NAME" ]; then
            echo "No deployment found"
            exit 1
          fi
          
          # Wait for deployment with timeout
          echo "Waiting for deployment $DEPLOY_NAME to be ready..."
          kubectl wait --for=condition=available --timeout=300s $DEPLOY_NAME
          
          # Check service status
          echo "Checking service endpoints..."
          kubectl get services -o wide
          
          # Verify pods are running
          echo "Checking pod status..."
          kubectl get pods -o wide
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        id: init
        working-directory: ./infra
        run: |
          terraform init -backend-config="resource_group_name=${{ secrets.TF_RG }}" \
                        -backend-config="storage_account_name=${{ secrets.TF_STORAGE }}" \
                        -backend-config="container_name=tfstate" \
                        -backend-config="key=terraform.tfstate"

      - name: Terraform Format Check
        working-directory: ./infra
        run: terraform fmt -check

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        run: |
          terraform plan -detailed-exitcode -out=tfplan 2>&1 | tee plan.txt
          planExitCode=$?
          echo "PLAN_EXIT_CODE=$planExitCode" >> $GITHUB_ENV
          if [ $planExitCode -eq 2 ]; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Terraform Show
        if: env.CHANGES_DETECTED == 'true'
        working-directory: ./infra
        run: |
          terraform show -no-color tfplan > plan.txt

      - name: Terraform Apply
        id: apply
        if: env.CHANGES_DETECTED == 'true'
        working-directory: ./infra
        run: |
          terraform apply -auto-approve tfplan

      - name: Capture Terraform Outputs
        id: terraform_output
        working-directory: ./infra
        run: |
          echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RG }} \
                                 --name ${{ secrets.AKS_CLUSTER_NAME }} \
                                 --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
